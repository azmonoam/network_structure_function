import lightgbm
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns

from networks_teachability_regression.regression_tree_learn import tree_regression

COLORS = ['#4F6272', '#B7C3F3', '#DD7596', '#8EB897', '#f6bd60', '#e76f51', '#2a9d8f']

EDGE_MAPPING = [
    '((0, 0), (0, 0))',
    '((0, 0), (0, 1))',
    '((0, 0), (0, 2))',
    '((0, 0), (0, 3))',
    '((0, 0), (0, 4))',
    '((0, 0), (0, 5))',
    '((0, 0), (1, 0))',
    '((0, 0), (1, 1))',
    '((0, 0), (1, 2))',
    '((0, 0), (1, 3))',
    '((0, 0), (1, 4))',
    '((0, 0), (1, 5))',
    '((0, 0), (2, 0))',
    '((0, 0), (2, 1))',
    '((0, 0), (2, 2))',
    '((0, 0), (2, 3))',
    '((0, 0), (3, 0))',
    '((0, 0), (3, 1))',
    '((0, 0), (4, 0))',
    '((0, 0), (4, 1))',
    '((0, 1), (0, 0))',
    '((0, 1), (0, 1))',
    '((0, 1), (0, 2))',
    '((0, 1), (0, 3))',
    '((0, 1), (0, 4))',
    '((0, 1), (0, 5))',
    '((0, 1), (1, 0))',
    '((0, 1), (1, 1))',
    '((0, 1), (1, 2))',
    '((0, 1), (1, 3))',
    '((0, 1), (1, 4))',
    '((0, 1), (1, 5))',
    '((0, 1), (2, 0))',
    '((0, 1), (2, 1))',
    '((0, 1), (2, 2))',
    '((0, 1), (2, 3))',
    '((0, 1), (3, 0))',
    '((0, 1), (3, 1))',
    '((0, 1), (4, 0))',
    '((0, 1), (4, 1))',
    '((0, 2), (0, 0))',
    '((0, 2), (0, 1))',
    '((0, 2), (0, 2))',
    '((0, 2), (0, 3))',
    '((0, 2), (0, 4))',
    '((0, 2), (0, 5))',
    '((0, 2), (1, 0))',
    '((0, 2), (1, 1))',
    '((0, 2), (1, 2))',
    '((0, 2), (1, 3))',
    '((0, 2), (1, 4))',
    '((0, 2), (1, 5))',
    '((0, 2), (2, 0))',
    '((0, 2), (2, 1))',
    '((0, 2), (2, 2))',
    '((0, 2), (2, 3))',
    '((0, 2), (3, 0))',
    '((0, 2), (3, 1))',
    '((0, 2), (4, 0))',
    '((0, 2), (4, 1))',
    '((0, 3), (0, 0))',
    '((0, 3), (0, 1))',
    '((0, 3), (0, 2))',
    '((0, 3), (0, 3))',
    '((0, 3), (0, 4))',
    '((0, 3), (0, 5))',
    '((0, 3), (1, 0))',
    '((0, 3), (1, 1))',
    '((0, 3), (1, 2))',
    '((0, 3), (1, 3))',
    '((0, 3), (1, 4))',
    '((0, 3), (1, 5))',
    '((0, 3), (2, 0))',
    '((0, 3), (2, 1))',
    '((0, 3), (2, 2))',
    '((0, 3), (2, 3))',
    '((0, 3), (3, 0))',
    '((0, 3), (3, 1))',
    '((0, 3), (4, 0))',
    '((0, 3), (4, 1))',
    '((0, 4), (0, 0))',
    '((0, 4), (0, 1))',
    '((0, 4), (0, 2))',
    '((0, 4), (0, 3))',
    '((0, 4), (0, 4))',
    '((0, 4), (0, 5))',
    '((0, 4), (1, 0))',
    '((0, 4), (1, 1))',
    '((0, 4), (1, 2))',
    '((0, 4), (1, 3))',
    '((0, 4), (1, 4))',
    '((0, 4), (1, 5))',
    '((0, 4), (2, 0))',
    '((0, 4), (2, 1))',
    '((0, 4), (2, 2))',
    '((0, 4), (2, 3))',
    '((0, 4), (3, 0))',
    '((0, 4), (3, 1))',
    '((0, 4), (4, 0))',
    '((0, 4), (4, 1))',
    '((0, 5), (0, 0))',
    '((0, 5), (0, 1))',
    '((0, 5), (0, 2))',
    '((0, 5), (0, 3))',
    '((0, 5), (0, 4))',
    '((0, 5), (0, 5))',
    '((0, 5), (1, 0))',
    '((0, 5), (1, 1))',
    '((0, 5), (1, 2))',
    '((0, 5), (1, 3))',
    '((0, 5), (1, 4))',
    '((0, 5), (1, 5))',
    '((0, 5), (2, 0))',
    '((0, 5), (2, 1))',
    '((0, 5), (2, 2))',
    '((0, 5), (2, 3))',
    '((0, 5), (3, 0))',
    '((0, 5), (3, 1))',
    '((0, 5), (4, 0))',
    '((0, 5), (4, 1))',
    '((1, 0), (0, 0))',
    '((1, 0), (0, 1))',
    '((1, 0), (0, 2))',
    '((1, 0), (0, 3))',
    '((1, 0), (0, 4))',
    '((1, 0), (0, 5))',
    '((1, 0), (1, 0))',
    '((1, 0), (1, 1))',
    '((1, 0), (1, 2))',
    '((1, 0), (1, 3))',
    '((1, 0), (1, 4))',
    '((1, 0), (1, 5))',
    '((1, 0), (2, 0))',
    '((1, 0), (2, 1))',
    '((1, 0), (2, 2))',
    '((1, 0), (2, 3))',
    '((1, 0), (3, 0))',
    '((1, 0), (3, 1))',
    '((1, 0), (4, 0))',
    '((1, 0), (4, 1))',
    '((1, 1), (0, 0))',
    '((1, 1), (0, 1))',
    '((1, 1), (0, 2))',
    '((1, 1), (0, 3))',
    '((1, 1), (0, 4))',
    '((1, 1), (0, 5))',
    '((1, 1), (1, 0))',
    '((1, 1), (1, 1))',
    '((1, 1), (1, 2))',
    '((1, 1), (1, 3))',
    '((1, 1), (1, 4))',
    '((1, 1), (1, 5))',
    '((1, 1), (2, 0))',
    '((1, 1), (2, 1))',
    '((1, 1), (2, 2))',
    '((1, 1), (2, 3))',
    '((1, 1), (3, 0))',
    '((1, 1), (3, 1))',
    '((1, 1), (4, 0))',
    '((1, 1), (4, 1))',
    '((1, 2), (0, 0))',
    '((1, 2), (0, 1))',
    '((1, 2), (0, 2))',
    '((1, 2), (0, 3))',
    '((1, 2), (0, 4))',
    '((1, 2), (0, 5))',
    '((1, 2), (1, 0))',
    '((1, 2), (1, 1))',
    '((1, 2), (1, 2))',
    '((1, 2), (1, 3))',
    '((1, 2), (1, 4))',
    '((1, 2), (1, 5))',
    '((1, 2), (2, 0))',
    '((1, 2), (2, 1))',
    '((1, 2), (2, 2))',
    '((1, 2), (2, 3))',
    '((1, 2), (3, 0))',
    '((1, 2), (3, 1))',
    '((1, 2), (4, 0))',
    '((1, 2), (4, 1))',
    '((1, 3), (0, 0))',
    '((1, 3), (0, 1))',
    '((1, 3), (0, 2))',
    '((1, 3), (0, 3))',
    '((1, 3), (0, 4))',
    '((1, 3), (0, 5))',
    '((1, 3), (1, 0))',
    '((1, 3), (1, 1))',
    '((1, 3), (1, 2))',
    '((1, 3), (1, 3))',
    '((1, 3), (1, 4))',
    '((1, 3), (1, 5))',
    '((1, 3), (2, 0))',
    '((1, 3), (2, 1))',
    '((1, 3), (2, 2))',
    '((1, 3), (2, 3))',
    '((1, 3), (3, 0))',
    '((1, 3), (3, 1))',
    '((1, 3), (4, 0))',
    '((1, 3), (4, 1))',
    '((1, 4), (0, 0))',
    '((1, 4), (0, 1))',
    '((1, 4), (0, 2))',
    '((1, 4), (0, 3))',
    '((1, 4), (0, 4))',
    '((1, 4), (0, 5))',
    '((1, 4), (1, 0))',
    '((1, 4), (1, 1))',
    '((1, 4), (1, 2))',
    '((1, 4), (1, 3))',
    '((1, 4), (1, 4))',
    '((1, 4), (1, 5))',
    '((1, 4), (2, 0))',
    '((1, 4), (2, 1))',
    '((1, 4), (2, 2))',
    '((1, 4), (2, 3))',
    '((1, 4), (3, 0))',
    '((1, 4), (3, 1))',
    '((1, 4), (4, 0))',
    '((1, 4), (4, 1))',
    '((1, 5), (0, 0))',
    '((1, 5), (0, 1))',
    '((1, 5), (0, 2))',
    '((1, 5), (0, 3))',
    '((1, 5), (0, 4))',
    '((1, 5), (0, 5))',
    '((1, 5), (1, 0))',
    '((1, 5), (1, 1))',
    '((1, 5), (1, 2))',
    '((1, 5), (1, 3))',
    '((1, 5), (1, 4))',
    '((1, 5), (1, 5))',
    '((1, 5), (2, 0))',
    '((1, 5), (2, 1))',
    '((1, 5), (2, 2))',
    '((1, 5), (2, 3))',
    '((1, 5), (3, 0))',
    '((1, 5), (3, 1))',
    '((1, 5), (4, 0))',
    '((1, 5), (4, 1))',
    '((2, 0), (0, 0))',
    '((2, 0), (0, 1))',
    '((2, 0), (0, 2))',
    '((2, 0), (0, 3))',
    '((2, 0), (0, 4))',
    '((2, 0), (0, 5))',
    '((2, 0), (1, 0))',
    '((2, 0), (1, 1))',
    '((2, 0), (1, 2))',
    '((2, 0), (1, 3))',
    '((2, 0), (1, 4))',
    '((2, 0), (1, 5))',
    '((2, 0), (2, 0))',
    '((2, 0), (2, 1))',
    '((2, 0), (2, 2))',
    '((2, 0), (2, 3))',
    '((2, 0), (3, 0))',
    '((2, 0), (3, 1))',
    '((2, 0), (4, 0))',
    '((2, 0), (4, 1))',
    '((2, 1), (0, 0))',
    '((2, 1), (0, 1))',
    '((2, 1), (0, 2))',
    '((2, 1), (0, 3))',
    '((2, 1), (0, 4))',
    '((2, 1), (0, 5))',
    '((2, 1), (1, 0))',
    '((2, 1), (1, 1))',
    '((2, 1), (1, 2))',
    '((2, 1), (1, 3))',
    '((2, 1), (1, 4))',
    '((2, 1), (1, 5))',
    '((2, 1), (2, 0))',
    '((2, 1), (2, 1))',
    '((2, 1), (2, 2))',
    '((2, 1), (2, 3))',
    '((2, 1), (3, 0))',
    '((2, 1), (3, 1))',
    '((2, 1), (4, 0))',
    '((2, 1), (4, 1))',
    '((2, 2), (0, 0))',
    '((2, 2), (0, 1))',
    '((2, 2), (0, 2))',
    '((2, 2), (0, 3))',
    '((2, 2), (0, 4))',
    '((2, 2), (0, 5))',
    '((2, 2), (1, 0))',
    '((2, 2), (1, 1))',
    '((2, 2), (1, 2))',
    '((2, 2), (1, 3))',
    '((2, 2), (1, 4))',
    '((2, 2), (1, 5))',
    '((2, 2), (2, 0))',
    '((2, 2), (2, 1))',
    '((2, 2), (2, 2))',
    '((2, 2), (2, 3))',
    '((2, 2), (3, 0))',
    '((2, 2), (3, 1))',
    '((2, 2), (4, 0))',
    '((2, 2), (4, 1))',
    '((2, 3), (0, 0))',
    '((2, 3), (0, 1))',
    '((2, 3), (0, 2))',
    '((2, 3), (0, 3))',
    '((2, 3), (0, 4))',
    '((2, 3), (0, 5))',
    '((2, 3), (1, 0))',
    '((2, 3), (1, 1))',
    '((2, 3), (1, 2))',
    '((2, 3), (1, 3))',
    '((2, 3), (1, 4))',
    '((2, 3), (1, 5))',
    '((2, 3), (2, 0))',
    '((2, 3), (2, 1))',
    '((2, 3), (2, 2))',
    '((2, 3), (2, 3))',
    '((2, 3), (3, 0))',
    '((2, 3), (3, 1))',
    '((2, 3), (4, 0))',
    '((2, 3), (4, 1))',
    '((3, 0), (0, 0))',
    '((3, 0), (0, 1))',
    '((3, 0), (0, 2))',
    '((3, 0), (0, 3))',
    '((3, 0), (0, 4))',
    '((3, 0), (0, 5))',
    '((3, 0), (1, 0))',
    '((3, 0), (1, 1))',
    '((3, 0), (1, 2))',
    '((3, 0), (1, 3))',
    '((3, 0), (1, 4))',
    '((3, 0), (1, 5))',
    '((3, 0), (2, 0))',
    '((3, 0), (2, 1))',
    '((3, 0), (2, 2))',
    '((3, 0), (2, 3))',
    '((3, 0), (3, 0))',
    '((3, 0), (3, 1))',
    '((3, 0), (4, 0))',
    '((3, 0), (4, 1))',
    '((3, 1), (0, 0))',
    '((3, 1), (0, 1))',
    '((3, 1), (0, 2))',
    '((3, 1), (0, 3))',
    '((3, 1), (0, 4))',
    '((3, 1), (0, 5))',
    '((3, 1), (1, 0))',
    '((3, 1), (1, 1))',
    '((3, 1), (1, 2))',
    '((3, 1), (1, 3))',
    '((3, 1), (1, 4))',
    '((3, 1), (1, 5))',
    '((3, 1), (2, 0))',
    '((3, 1), (2, 1))',
    '((3, 1), (2, 2))',
    '((3, 1), (2, 3))',
    '((3, 1), (3, 0))',
    '((3, 1), (3, 1))',
    '((3, 1), (4, 0))',
    '((3, 1), (4, 1))',
    '((4, 0), (0, 0))',
    '((4, 0), (0, 1))',
    '((4, 0), (0, 2))',
    '((4, 0), (0, 3))',
    '((4, 0), (0, 4))',
    '((4, 0), (0, 5))',
    '((4, 0), (1, 0))',
    '((4, 0), (1, 1))',
    '((4, 0), (1, 2))',
    '((4, 0), (1, 3))',
    '((4, 0), (1, 4))',
    '((4, 0), (1, 5))',
    '((4, 0), (2, 0))',
    '((4, 0), (2, 1))',
    '((4, 0), (2, 2))',
    '((4, 0), (2, 3))',
    '((4, 0), (3, 0))',
    '((4, 0), (3, 1))',
    '((4, 0), (4, 0))',
    '((4, 0), (4, 1))',
    '((4, 1), (0, 0))',
    '((4, 1), (0, 1))',
    '((4, 1), (0, 2))',
    '((4, 1), (0, 3))',
    '((4, 1), (0, 4))',
    '((4, 1), (0, 5))',
    '((4, 1), (1, 0))',
    '((4, 1), (1, 1))',
    '((4, 1), (1, 2))',
    '((4, 1), (1, 3))',
    '((4, 1), (1, 4))',
    '((4, 1), (1, 5))',
    '((4, 1), (2, 0))',
    '((4, 1), (2, 1))',
    '((4, 1), (2, 2))',
    '((4, 1), (2, 3))',
    '((4, 1), (3, 0))',
    '((4, 1), (3, 1))',
    '((4, 1), (4, 0))',
    '((4, 1), (4, 1))']
METRIC_MAPPING = [
    'modularity',
    'num_connections',
    'normed_entropy',
]
ALL_MAPPING = EDGE_MAPPING + METRIC_MAPPING

if __name__ == '__main__':
    local_base_path = '/'
    base_path = '/Volumes/noamaz/modularity'
    # base_path = '/home/labs/schneidmann/noamaz/modularity'

    train_paths = [
        'xor_train_test_data/xor_train_2023-03-30-14-19-11_adj_True_meta_True.pkl',
        'xor_train_test_data/xor_train_2023-03-30-14-19-11_adj_True_meta_False.pkl',
        'xor_train_test_data/xor_train_2023-03-30-14-19-11_adj_False_meta_True.pkl',
    ]
    test_paths = [
        'xor_train_test_data/xot_test_2023-03-30-14-19-11_adj_True_meta_True.pkl',
        'xor_train_test_data/xot_test_2023-03-30-14-19-11_adj_True_meta_False.pkl',
        'xor_train_test_data/xot_test_2023-03-30-14-19-11_adj_False_meta_True.pkl',

    ]
    data_types = [
        'full input',
        'adjacency matrix input',
        'structure metrics input',
    ]
    inds_to_drop = [[402, 403], None, [2, 3]]
    input_names = ['Edge or Metric', 'Edge', 'Metric', ]
    num_features = [20, 20, 5, ]
    mappings = [ALL_MAPPING, EDGE_MAPPING, METRIC_MAPPING]
    res = []
    train_r2s = []
    test_r2s = []
    for train_path, test_path, data_type, mapping, input_name, num_feature, ind_to_drop in zip(train_paths, test_paths,
                                                                                               data_types,
                                                                                               mappings, input_names,
                                                                                               num_features,
                                                                                               inds_to_drop):
        model, train_r2, test_r2 = tree_regression(
            train_path=f'{base_path}/{train_path}',
            test_path=f'{base_path}/{test_path}',
            ind_to_drop=ind_to_drop,
        )
        lightgbm.plot_metric(model, title=f'mean squared error during training {data_type}',
                             dataset_names=['train', 'test'],
                             ylabel='Mean squared error')
        plt.savefig(f"{local_base_path}/plots/xor_regression_tree/2023-02-20_mean_squared_error_lightgbm_training_{data_type.replace(' ', '_')}.png")
        plt.show()

        feature_importance = pd.DataFrame(
            sorted(zip(model.feature_importances_, mapping), reverse=True),
            columns=['Value', input_name],
        )
        plt.figure()
        sns.barplot(x="Value", y=input_name, data=feature_importance.iloc[:num_feature],
                    palette=sns.color_palette("flare", n_colors=num_feature)
                    )
        plt.title(f'LightGBM Features {data_type}')
        plt.tight_layout()
        plt.savefig(
            f"{local_base_path}/plots/xor_regression_tree/2023-02-20_feature_importance_top_20_lightgbm_training_{data_type.replace(' ', '_')}.png")
        plt.show()
        res.append(model.evals_result_)
        train_r2s.append(train_r2)
        test_r2s.append(test_r2)
    fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(7, 6))
    bar_size = 0.15
    padding = 0.15
    y_locs = np.arange(2 * (bar_size * 3 + padding))
    for i, data_type in enumerate(data_types):
        ax1.plot(list(range(len(res[i]['test']['l2'])))[-30:], res[i]['test']['l2'][-30:], label=data_type, c=COLORS[i])
        ax2.plot(list(range(len(res[i]['train']['l2'])))[-30:], res[i]['train']['l2'][-30:], label=data_type,
                 c=COLORS[i])
        ax3.barh(y_locs + (i * bar_size), [train_r2s[i], test_r2s[i]], height=bar_size, color=COLORS[i],
                 label=data_types[i])

    ax1.set_xlabel('Iteration')
    ax1.set_ylabel('MSE loss- Test')
    ax2.set_xlabel('Iteration')
    ax2.set_ylabel('MSE loss - Train')
    ax3.set(
        yticks=y_locs + bar_size,
        yticklabels=['Train', 'Test'],
        ylim=[0 - padding, len(y_locs) - padding],
        xlim=[max(max(train_r2s), max(test_r2s)) - 0.07, max(max(train_r2s), max(test_r2s)) + 0.03],
    )
    ax3.set_xlabel('r2 score')

    ax1.set_title('Prediction of teachability mean performance')
    ax1.legend()
    ax2.legend()
    ax3.legend()
    plt.savefig(f"{local_base_path}/plots/xor_regression_tree/2023-02-20_data_type_compericent_lughtgbm_regression.png")
    plt.show()
